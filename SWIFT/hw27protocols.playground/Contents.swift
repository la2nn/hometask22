/* 1. –û–±—ä—è–≤–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª Food, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–ø–µ—Ä—Ç–∏ name (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ) –∏ –º–µ—Ç–æ–¥ taste(), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ –≤–∫—É—Å–æ–≤—ã–º–∏ –æ—â—É—â–µ–Ω–∏—è–º–∏

2. –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–∏–Ω–µ—Å–ª–∏ –∏–∑ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—É–º–∫–µ (–º–∞—Å—Å–∏–≤) –∏ –≤—Å–µ, –∫–∞–∫ –Ω–∏ —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–ª–∏–∑—É—é—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª Food. –í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ —Å—É–º–∫–µ, –Ω–∞–∑–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏ –æ—Ç–∫—É—Å–∏—Ç—å –∫—É—Å–æ—á–µ–∫. –ú–æ–∂–µ—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ –∏–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

3. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –º–æ–≥—É—Ç –∏—Å–ø–æ—Ä—Ç–∏—Ç—å—Å—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ –ø–æ–ª–æ–∂–∏—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª Storable, –æ–Ω –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Food –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ—â–µ –±—É–ª–µ–≤—É—é –ø—Ä–æ–ø–µ—Ä—Ç–∏ - expired. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–º–µ–Ω–∏—Ç–µ Food –Ω–∞ Storable. –¢–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ –≤—Å–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏, –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–∞–¥–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ, —Ç–æ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –µ–≥–æ —Ç—É–¥–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –∏—Å–ø–æ—Ä—á–µ–Ω —É–∂–µ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∏–∑–±–∞–≤—å—Ç–µ—Å—å –æ—Ç –Ω–µ–≥–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞

4. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–ø–µ—Ä—Ç–∏ daysToExpire –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª Storable. –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ. –°–Ω–∞—á–∞–ª–∞ –ø—É—Å—Ç—å –∏–¥—É—Ç —Ç–µ, –∫—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ—Ä—Ç—è—Ç—Å—è. –ï—Å–ª–∏ —Å—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Ç–æ —Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ –∏–º–µ–Ω–∏.

5. –ù–µ –≤—Å–µ, —á—Ç–æ –º—ã –∫–ª–∞–¥–µ–º –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, —è–≤–ª—è–µ—Ç—Å—è –µ–¥–æ–π. –ü–æ—ç—Ç–æ–º—É —Å–¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫, —á—Ç–æ–±—ã Storable –Ω–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–ª—Å—è –æ—Ç Food. –ú—ã –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –ø—Ä–∏–Ω–æ—Å–∏–º –µ–¥—É –¥–æ–º–æ–π, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ä–µ–∞–ª–∏–∑—É—é—Ç —Ç–µ–ø–µ—Ä—å 2 –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –∏ Storable. —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É —Ä–∞–±–æ—Ç–∞—Ç—å. */

protocol Food {
    var name: String { get }

    func taste() -> String
}

protocol Storable {
    var name: String { get set }
    var daysToExpire: Int { get set }
    var expired: Bool { get }
}

class Bread: Food, Storable {
    var name: String
    var daysToExpire: Int
    var expired: Bool {
        return daysToExpire == 0 ? true : false
    }
    
    func taste() -> String {
        return "Bread as a bread, its ok"
    }
    
    init (name: String, daysToExpire: Int) {
        self.name = name
        self.daysToExpire = daysToExpire
    }
}

class Cheese: Food, Storable {
    var name: String
    var daysToExpire: Int
    var expired: Bool {
        return daysToExpire == 0 ? true : false
    }
    
    func taste() -> String{
        return "Its tasty a bit"
    }
    
    init (name: String, daysToExpire: Int) {
        self.name = name
        self.daysToExpire = daysToExpire
    }
}

class Milk: Food, Storable {
    var name: String
    var daysToExpire: Int
    var expired: Bool {
        return daysToExpire == 0 ? true : false
    }
    
    func taste() -> String {
        return "hmm.. This milk has a strange taste... ü§îü§îü§î"
    }
    
    init (name: String, daysToExpire: Int) {
        self.name = name
        self.daysToExpire = daysToExpire
    }
}

class Jam: Food {
    var name = "Jam"
    
    func taste() -> String {
        return "its... BEAUTIFUL.. OHF GOD KILL ME .. i've never tasted so tasty food. oh.."
    }
}

class Medicine: Storable {
    var name: String
    var daysToExpire: Int
    var expired: Bool {
        return daysToExpire == 0 ? true : false
    }
    
    init (name: String, daysToExpire: Int) {
        self.name = name
        self.daysToExpire = daysToExpire
    }
}

let milk1 = Milk(name: "–ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ", daysToExpire: 0)
let milk2 = Milk(name: String("–ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ".reversed()), daysToExpire: 2)
let bread = Bread(name: "–ö—Ä–∞—Å–Ω–∞—è —Ü–µ–Ω–∞", daysToExpire: 1)
let jam = Jam()
let cheese1 = Cheese(name: "–î—Ä—É–∂–±–∞", daysToExpire: 4)
let cheese2 = Cheese(name: "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π", daysToExpire: 10)
let cheese3 = Cheese(name: "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", daysToExpire: 0)
let medicine1 = Medicine(name: "–ü—Ä–∞–∫—Ç–æ–Ω–∏—Å", daysToExpire: 44)
let medicine2 = Medicine(name: "–ú–µ–∑–∏–º", daysToExpire: 192)
let medicine3 = Medicine(name: "–ü—É—Ä–≥–µ–Ω", daysToExpire: 0)

var bagFromShop : [AnyObject] = [milk1, milk2, cheese1, cheese2, cheese3, jam, bread, medicine1, medicine2, medicine3]

var refrigerator: Array<AnyObject> = []
var trashBin: Array<AnyObject> = []

func putItemsInRefrigeratorFrom(bag: inout [AnyObject]) {
    for item in bag {
        if let object = item as? Storable {
            object.expired ? trashBin.append(item) : refrigerator.append(item)
            print("Days left \(object.daysToExpire) for \(object.name)")
        }
       
        if item is Food && !(item is Storable) {                                                                // —É Food –ø–æ –∑–∞–¥–∞–Ω–∏—é –Ω–µ—Ç Storable -> —Å–æ–æ—Ç–≤–µ—Ç–≤–µ–Ω–Ω–æ –Ω–µ—Ç –∏ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
            if let object = item as? Food {
                print("\(object.name) has unlimited days to expire!")
            }
            refrigerator.append(item)
        }
    }
    bag.removeAll()
    print("Now refrigerator contains \(refrigerator.count) item(s)")
    print("Now trash bin contains \(trashBin.count) item(s)")
}

func sortRefrigerator() {
    var storableObjects = [Storable]()
    var foodObjects = [Food]()
    
    for item in refrigerator {
        if let object = item as? Storable {
            storableObjects.append(object)
        }
        
        if item is Food && !(item is Storable) {
                foodObjects.append(item as! Food)
        }
    }
    storableObjects.sort { $0.daysToExpire < $1.daysToExpire }
    refrigerator.removeAll()
    storableObjects.forEach { refrigerator.append($0 as AnyObject) }                     // –±–µ–∑  anyObject —Ä—É–≥–∞–µ—Ç—Å—è
    foodObjects.forEach { refrigerator.append($0 as AnyObject) }                         // –±–µ–∑  anyObject —Ä—É–≥–∞–µ—Ç—Å—è
}

func tasteAllFoodInRefregerator(items: [AnyObject]) {
    for item in items {
        if let object = item as? Food {
            let tasteString = object.name + " ---> " + object.taste()
            print(tasteString)
        }
    }
}

putItemsInRefrigeratorFrom(bag: &bagFromShop)
sortRefrigerator()
print(refrigerator)
tasteAllFoodInRefregerator(items: refrigerator)

