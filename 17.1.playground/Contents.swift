// –ó–∞–¥–∞–Ω–∏–µ 3

/*
 –ú–æ—Ä—Å–∫–æ–π –±–æ–π (–¢—è–∂–µ–ª—ã–π —É—Ä–æ–≤–µ–Ω—å)
 1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –∫–æ—Ä–∞–±–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫. –í –Ω–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–¥–Ω–æ–º–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–ø–æ–ø–∞—Ö–∏–≤–∞–µ—Ç —Å–∞–±—Å–∫—Ä–∏–ø—Ç–æ–º). –ö–æ—Ä–∞–±–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã—Å—Ç—Ä–µ–ª—ã –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ –≤—ã—á–∏—Å–ª—è—Ç—å –∫–æ–≥–¥–∞ –æ–Ω —É–±–∏—Ç
 2. –°–æ–∑–¥–∞–π—Ç–µ –¥–≤—É–º–µ—Ä–Ω–æ–µ –ø–æ–ª–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –∫–æ—Ä–∞–±–ª–∏ –≤—Ä–∞–≥–∞. –°—Ç—Ä–µ–ª—è–π—Ç–µ –ø–æ –ø–æ–ª—é –∏ –ø–æ–¥–±–µ–π—Ç–µ –≤—Ä–∞–∂–µ—Å–∫–∏–π —á–µ—Ç—ã—Ä–µ—Ö —Ç—Ä—É–±–Ω–∏–∫ :)
 3. –°–¥–µ–ª–∞–π—Ç–µ –¥–ª—è –ø—Ä–∏–ª–∏—á–∏—è –ø–∞—Ä—É –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –º–∏–º–æ, –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ –≤—Å–µ –≤—ã–≤–æ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω :) */

struct Coordinate: Hashable {
    var x: Int
    var y: Int
}

enum CellType: String {
    case shipAlive = "üî≤"
    case shipDead = "‚ùå"
    case water = "üåÄ"
    case miss = "üí¢"
}

let myBattlefield = [["w", "w", "w", "s", "w", "w", "w", "w", "w", "w"],
                     ["w", "s", "w", "s", "w", "s", "s", "s", "s", "w"],
                     ["s", "s", "w", "w", "w", "w", "w", "w", "w", "w"],
                     ["w", "w", "w", "w", "w", "w", "w", "w", "w", "w"],
                     ["w", "w", "w", "w", "w", "w", "w", "w", "w", "w"],
                     ["w", "w", "w", "s", "s", "s", "w", "w", "w", "w"],
                     ["w", "s", "w", "w", "w", "w", "w", "w", "w", "s"],
                     ["w", "s", "w", "w", "s", "s", "w", "w", "w", "w"],
                     ["w", "s", "w", "w", "w", "w", "w", "w", "w", "w"],
                     ["w", "w", "w", "s", "w", "w", "w", "w", "s", "w"]]

let enemyBattlefield = [["w", "w", "w", "w", "w", "w", "w", "w", "w", "w"],
                        ["s", "s", "w", "s", "w", "w", "w", "w", "s", "w"],
                        ["s", "w", "w", "s", "w", "w", "w", "w", "s", "w"],
                        ["w", "w", "w", "w", "w", "w", "w", "s", "s", "w"],
                        ["s", "s", "w", "w", "w", "w", "w", "w", "w", "w"],
                        ["w", "w", "w", "s", "s", "s", "w", "w", "w", "w"],
                        ["w", "s", "w", "w", "w", "w", "w", "w", "w", "s"],
                        ["w", "s", "w", "w", "w", "w", "w", "w", "w", "w"],
                        ["w", "s", "w", "w", "w", "w", "w", "w", "w", "w"],
                        ["w", "w", "w", "s", "w", "w", "s", "w", "w", "w"]]

var countOfShips = 0                                                        // –ü–æ –ø—Ä–∞–≤–∏–ª–∞–º: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–∞–±–ª–µ–π –ø–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–≤–Ω—ã, –ø–æ—ç—Ç–º–æ—É –Ω–µ —Å—Ç–∞–ª –¥–µ–ª–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–∞–±–ª–µ–π –∑–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É, –∞ —Å–º—ã—Å–ª..

func makeDictionaryFrom(field: [[String]]) -> [Coordinate : CellType] {
    var dictionary = [Coordinate : CellType]()
    for (y, array) in field.enumerated() {
        for (x, char) in array.enumerated() {
            let cell = Coordinate(x: x, y: y)
            switch char {
            case "s":
                dictionary[cell] = CellType.shipAlive
                countOfShips += 1
                
            case "w":
                dictionary[cell] = CellType.water
            default:
                break
            }
        }
    }
    return dictionary
}

var myCount = Int()                                                     // –ö–æ–ª-–≤–æ –º–æ–∏—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π
var enemyCount = Int()                                                  // –ö–æ–ª-–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤—Ä–∞–≥–∞
var enemyShots: [Coordinate] = []                                       // –ú–∞—Å—Å–∏–≤ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –≤—Ä–∞–≥–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
var myField = makeDictionaryFrom(field: myBattlefield)                  // –î–∏–∫—à–µ–Ω–µ—Ä–∏ –º–æ–µ–π –∫–∞—Ä—Ç—ã
var enemyField = makeDictionaryFrom(field: enemyBattlefield)            // –î–∏–∫—à–µ–Ω–µ—Ä–∏ –≤—Ä–∞–∂–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã

func printBattlefield(field: [Coordinate : CellType]) {
    var currentString = String()
    for y in 0...9 {
        for x in 0...9 {
            switch field[Coordinate(x: x, y: y)]! {
            case CellType.water: currentString += CellType.water.rawValue + " "
            case CellType.miss: currentString += CellType.miss.rawValue + " "
            case CellType.shipAlive: currentString += CellType.shipAlive.rawValue + " "
            case CellType.shipDead: currentString += CellType.shipDead.rawValue + " "
            }
        }
        print(currentString)
        currentString = ""
    }
    print()
}

func printHiddenBattlefield() {                                          // –¢.–µ. —Å "—Ç—É–º–∞–Ω–æ–º –≤–æ–π–Ω—ã"
    var currentString = String()
    for y in 0...9 {
        for x in 0...9 {
            switch enemyField[Coordinate(x: x, y: y)]! {
            case CellType.water: currentString += CellType.water.rawValue + " "
            case CellType.miss: currentString += CellType.miss.rawValue + " "
            case CellType.shipAlive: currentString += CellType.water.rawValue + " "
            case CellType.shipDead: currentString += CellType.shipDead.rawValue + " "
            }
        }
        print(currentString)
        currentString = ""
    }
    print()
}

print("–ú–æ–µ –ø–æ–ª–µ: ")
printBattlefield(field: myField)
print("–í—Ä–∞–∂–µ—Å–∫–æ–µ –ø–æ–ª–µ: ")
printBattlefield(field: enemyField)

var isEnemyTurn = true
var isGameEnd = false

func myShot(shot: Coordinate) {
    var needToRestart = false
    
    guard !isGameEnd else {
        print("–ó–∞—á–µ–º —Å—Ç—Ä–µ–ª—è–µ—à—å, –¥—è–¥—è? –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")
        return
    }
    
        if (0...9 ~= shot.x) && (0...9 ~= shot.y) {
    
            switch enemyField[shot]! {
            case CellType.shipAlive: enemyField[shot]! = CellType.shipDead
                                     myCount += 1
                                     needToRestart = true
                                     print("–ü–æ–ø–∞–¥–∞–Ω–∏–µ! -> –í—ã —Å—Ç—Ä–µ–ª—è–µ—Ç–µ –µ—â–µ —Ä–∞–∑!")
                
            case CellType.water: enemyField[shot]! = CellType.miss
                                 print("–ü—Ä–æ–º–∞—Ö!")
                
            case CellType.miss: print("–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É!")
                                needToRestart = true
                
            case CellType.shipDead: print("–í—ã—Å—Ç—Ä–µ–ª –≤ —É–∂–µ –ø–æ–¥–±–∏—Ç—É—é —á–∞—Å—Ç—å –∫–æ—Ä–∞–±–ª—è!")
                                    needToRestart = true
            }
            
            if needToRestart {
                printHiddenBattlefield()
                if myCount == countOfShips/2 {          // –ó–∞–ø–∏—Ö–∞–ª —Å—é–¥–∞, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–ª–æ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –≤—ã—Å—Ç—Ä–µ–ª!
                    print("–Ø –ø–æ–±–µ–¥–∏–ª!")
                    isGameEnd = true
                }
                if enemyCount == countOfShips/2 {
                    print("–í—Ä–∞–≥ –ø–æ–±–µ–¥–∏–ª!")
                    isGameEnd = true
                }
                return
            } else {
                print("–Ø –ø–æ–ø–∞–ª \(myCount) —Ä–∞–∑(–∞) –∏–∑ \(countOfShips/2)!")
                printHiddenBattlefield()
            }
            
        } else {
            print("–ü–æ–ª–µ 10—Ö10, —Ç.–µ. x‚àà[0...9] –∏ y‚àà[0...9]")
            return
        }
        
        // —Ç–µ–ø–µ—Ä—å –≤—ã—Å—Ç—Ä–µ–ª –≤—Ä–∞–≥–∞
        // –ø–æ–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª –Ω–µ —Å–¥–µ–ª–∞–Ω, –æ–Ω –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –µ–≥–æ —Å–¥–µ–ª–∞—Ç—å
        while isEnemyTurn == true {
            enemyTurn()
        }
        isEnemyTurn = true
}

func enemyTurn() {
    var x = Int.random(in: 0...9)
    var y = Int.random(in: 0...9)
    var needToRestart = false
    
    while enemyShots.contains(Coordinate(x: x, y: y)) {
        x = Int.random(in: 0...9)
        y = Int.random(in: 0...9)
    }
    
    switch myField[Coordinate(x: x, y: y)]! {
    case CellType.shipAlive: myField[Coordinate(x: x, y: y)]! = CellType.shipDead
                             enemyCount += 1
                             needToRestart = true
                             print("–ü–æ–ø–∞–¥–∞–Ω–∏–µ –æ—Ç –≤—Ä–∞–≥–∞ –≤ –º–æ—é –±—É—Ö—Ç—É!")
        
    case CellType.water: myField[Coordinate(x: x, y: y)]! = CellType.miss
                         print("–ü—Ä–æ–º–∞—Ö –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!")
        
   /* case CellType.miss: print("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É!")
                        needToRestart = true
    case CellType.shipDead: print("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ –ø–æ–¥–±–∏—Ç—É—é —á–∞—Å—Ç—å –∫–æ—Ä–æ–±–ª—è!")
                            needToRestart = true                                    —Ç–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å, —Ç.–∫. –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å—Ç—Ä–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º –∫–ª–µ—Ç–∫–∞–º, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–Ω–µ–µ –Ω–µ –ø–æ–ø–∞–¥–∞–ª! */
    default: break
    }
    
    enemyShots.append(Coordinate(x: x, y: y))
    
    if needToRestart {
        printBattlefield(field: myField)
        isEnemyTurn = true
    } else {
        print("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–ø–∞–ª \(enemyCount) —Ä–∞–∑(–∞) –∏–∑ \(countOfShips/2)!")
        printBattlefield(field: myField)
        isEnemyTurn = false
    }
}

myShot(shot: Coordinate(x: 0, y: 1))
myShot(shot: Coordinate(x: 1, y: 1))
myShot(shot: Coordinate(x: 3, y: 1))
myShot(shot: Coordinate(x: 8, y: 1))
myShot(shot: Coordinate(x: 0, y: 2))
myShot(shot: Coordinate(x: 3, y: 2))
myShot(shot: Coordinate(x: 8, y: 2))
myShot(shot: Coordinate(x: 7, y: 3))
myShot(shot: Coordinate(x: 8, y: 3))
myShot(shot: Coordinate(x: 0, y: 4))
myShot(shot: Coordinate(x: 1, y: 4))
myShot(shot: Coordinate(x: 3, y: 5))
myShot(shot: Coordinate(x: 4, y: 5))
myShot(shot: Coordinate(x: 5, y: 5))
myShot(shot: Coordinate(x: 1, y: 6))
myShot(shot: Coordinate(x: 9, y: 6))
myShot(shot: Coordinate(x: 1, y: 7))
myShot(shot: Coordinate(x: 1, y: 8))
myShot(shot: Coordinate(x: 3, y: 9))
myShot(shot: Coordinate(x: 6, y: 9))
 
myShot(shot: Coordinate(x: 0, y: 0))
myShot(shot: Coordinate(x: 10, y: 10))
//myShot(shot: Coordinate(x: Int.random(in: 0...9), y: Int.random(in: 0...9)))
//myShot(shot: Coordinate(x: Int.random(in: 0...9), y: Int.random(in: 0...9)))
/*myShot(shot: Coordinate(x: 0, y: 1))
myShot(shot: Coordinate(x: 1, y: 1))
myShot(shot: Coordinate(x: 0, y: 2))*/

